{"version":3,"sources":["api/useFetch.js","api/dataRoutes.js","components/Logo.js","components/Description.js","components/Modal.js","components/Characters.js","components/Locations.js","App.js","api/useData.js","serviceWorker.js","index.js"],"names":["useFetch","initUrl","useState","url","setUrl","undefined","data","setData","useEffect","fetch","then","response","status","json","mainUrls","Logo","rmImage","process","id","href","src","alt","Description","UniversalModal","displayData","open","closeHandler","body","className","map","elem","index","key","Modal","onClose","aria-labelledby","aria-describedby","Characters","props","charactersFetched","characters","results","pages","info","setOpen","actualCharacter","setActualCharacter","characterData","Object","entries","character","name","image","onClick","ev","target","find","x","parseInt","species","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","handlePageClick","containerClassName","subContainerClassName","activeClassName","Locations","locationsFetched","locations","actualLocation","setActualLocation","locationData","location","type","App","characterPages","setCharacterPages","locationPages","setLocationPages","content","setContent","pageNum","useLocations","useCharacters","e","selected","window","scrollTo","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.015d2b2c.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\"\n\n/**\n     Fetch data from the given url. If it can't get any data from the url, than it writes a message into the console.\n     *\n     * @param initUrl string that gives the route that the function fetch data from.\n     */\nexport const useFetch = (initUrl) => {\n\tconst [url, setUrl] = useState(initUrl)\n\tconst [data, setData] = useState(undefined)\n\n\tuseEffect(() => {\n\t\tfetch(url)\n\t\t\t.then((response) => {\n\t\t\t\tif (response.status !== 200) return \"There must be a problem\"\n\t\t\t\treturn response.json()\n\t\t\t})\n\t\t\t.then((json) => setData(json))\n\t}, [url])\n\n\treturn [data, setUrl]\n}\n","export const mainUrls = {\n  characters: \"https://rickandmortyapi.com/api/character/?page=\",\n  locations: \"https://rickandmortyapi.com/api/location/?page=\",\n};\n","import React from \"react\"\n\nconst Logo = () => {\n\tlet rmImage = process.env.PUBLIC_URL + \"/img/rick-and-morty.jpg\"\n\treturn (\n\t\t<div id=\"openimage\">\n\t\t\t<a href=\"/\">\n\t\t\t\t<img src={rmImage} alt={rmImage} />\n\t\t\t</a>\n\t\t</div>\n\t)\n}\nexport default Logo\n","import React from \"react\";\nconst Description = () => {\n  return (\n    <div id=\"desc\">\n      <p>Do you know Rick and Morty? If not, start watching it!</p>\n      <p>\n        Anyways, the Rick and Morty universe is kinda big with a lot of\n        characters and locations. You with your friends decided that you want to\n        make it easier to look up information about each character and location.\n        You want to create a React app that with the use of an open-source API,\n        shows information about everything you need. Your friend built the tools\n        for the data fetching, you just need to use the data and build the app.\n      </p>\n    </div>\n  );\n};\nexport default Description;\n","import React from \"react\"\nimport Modal from \"@material-ui/core/Modal\"\n\nexport default function UniversalModal({ displayData, open, closeHandler }) {\n\tconst body = (\n\t\t<div className=\"popUpCard\">\n\t\t\t{displayData.map((elem, index) => {\n\t\t\t\tif (\n\t\t\t\t\t(typeof elem[1] === \"string\" ||\n\t\t\t\t\t\ttypeof elem[1] === \"number\") &&\n\t\t\t\t\telem[1] !== \"\"\n\t\t\t\t)\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<p key={index}>\n\t\t\t\t\t\t\t{elem[0]}:{\" \"}\n\t\t\t\t\t\t\t<span className=\"popUpData\">{elem[1]}</span>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t)\n\t\t\t\treturn null\n\t\t\t})}\n\t\t</div>\n\t)\n\n\treturn (\n\t\t<div>\n\t\t\t<Modal\n\t\t\t\topen={open}\n\t\t\t\tonClose={closeHandler}\n\t\t\t\tclassName=\"modal\"\n\t\t\t\tdata={displayData}\n\t\t\t\taria-labelledby=\"simple-modal-title\"\n\t\t\t\taria-describedby=\"simple-modal-description\">\n\t\t\t\t{body}\n\t\t\t</Modal>\n\t\t</div>\n\t)\n}\n","import React, { useState } from \"react\"\nimport UniversalModal from \"./Modal\"\nimport ReactPaginate from \"react-paginate\"\n\nexport default function Characters(props) {\n\tconst charactersFetched = props.characters.results\n\tconst pages = props.characters.info.pages\n\tconst [open, setOpen] = useState(false)\n\tconst [actualCharacter, setActualCharacter] = useState(\"\")\n\n\tconst handleOpen = (target) => {\n\t\tsetActualCharacter(\n\t\t\tcharactersFetched.find((x) => x.id === parseInt(target))\n\t\t)\n\t\tsetOpen(true)\n\t}\n\n\tconst handleClose = () => {\n\t\tsetOpen(false)\n\t}\n\n\tconst characterData = Object.entries(actualCharacter)\n\n\treturn (\n\t\t<div>\n\t\t\t{charactersFetched.map((character) => (\n\t\t\t\t<div key={character.id} className=\"listCard\">\n\t\t\t\t\t<h1>{character.name}</h1>\n\t\t\t\t\t<img\n\t\t\t\t\t\tid={character.id}\n\t\t\t\t\t\tsrc={character.image}\n\t\t\t\t\t\tonClick={(ev) => handleOpen(ev.target.id)}\n\t\t\t\t\t\talt={character.name}\n\t\t\t\t\t/>\n\t\t\t\t\t<p>{character.species}</p>\n\t\t\t\t</div>\n\t\t\t))}\n\n\t\t\t<UniversalModal\n\t\t\t\tdisplayData={characterData}\n\t\t\t\topen={open}\n\t\t\t\tcloseHandler={handleClose}\n\t\t\t/>\n\t\t\t<ReactPaginate\n\t\t\t\tpreviousLabel={\"prev\"}\n\t\t\t\tnextLabel={\"next\"}\n\t\t\t\tbreakLabel={\"...\"}\n\t\t\t\tbreakClassName={\"break-me\"}\n\t\t\t\tpageCount={pages}\n\t\t\t\tmarginPagesDisplayed={2}\n\t\t\t\tpageRangeDisplayed={5}\n\t\t\t\tonPageChange={props.handlePageClick}\n\t\t\t\tcontainerClassName={\"pagination\"}\n\t\t\t\tsubContainerClassName={\"pages pagination\"}\n\t\t\t\tactiveClassName={\"active\"}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n","import React, { useState } from \"react\"\nimport UniversalModal from \"./Modal\"\nimport ReactPaginate from \"react-paginate\"\n\nexport default function Locations(props) {\n\tconst locationsFetched = props.locations.results\n\tconst pages = props.locations.info.pages\n\tconst [open, setOpen] = useState(false)\n\tconst [actualLocation, setActualLocation] = useState(\"\")\n\n\tconst handleOpen = (target) => {\n\t\tsetActualLocation(\n\t\t\tlocationsFetched.find((x) => x.id === parseInt(target))\n\t\t)\n\t\tsetOpen(true)\n\t}\n\n\tconst handleClose = () => {\n\t\tsetOpen(false)\n\t}\n\tconst locationData = Object.entries(actualLocation)\n\treturn (\n\t\t<div>\n\t\t\t{locationsFetched.map((location) => (\n\t\t\t\t<div\n\t\t\t\t\tkey={location.id}\n\t\t\t\t\tid={location.id}\n\t\t\t\t\tonClick={(ev) => handleOpen(ev.target.id)}\n\t\t\t\t\tclassName=\"listCard location\">\n\t\t\t\t\t<h1 id={location.id}>{location.name}</h1>\n\t\t\t\t\t<p id={location.id}>{location.type}</p>\n\t\t\t\t</div>\n\t\t\t))}\n\t\t\t<UniversalModal\n\t\t\t\tdisplayData={locationData}\n\t\t\t\topen={open}\n\t\t\t\tcloseHandler={handleClose}\n\t\t\t/>\n\t\t\t<ReactPaginate\n\t\t\t\tpreviousLabel={\"prev\"}\n\t\t\t\tnextLabel={\"next\"}\n\t\t\t\tbreakLabel={\"...\"}\n\t\t\t\tbreakClassName={\"break-me\"}\n\t\t\t\tpageCount={pages}\n\t\t\t\tmarginPagesDisplayed={2}\n\t\t\t\tpageRangeDisplayed={5}\n\t\t\t\tonPageChange={props.handlePageClick}\n\t\t\t\tcontainerClassName={\"pagination\"}\n\t\t\t\tsubContainerClassName={\"pages pagination\"}\n\t\t\t\tactiveClassName={\"active\"}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n","import React, { useState } from \"react\"\nimport \"./style.css\"\nimport \"./App.css\"\nimport { useCharacters, useLocations } from \"./api/useData\"\nimport Logo from \"./components/Logo\"\nimport Infotext from \"./components/Description\"\nimport Characters from \"./components/Characters\"\nimport Locations from \"./components/Locations\"\n\nfunction App() {\n\tlet charactersButton = process.env.PUBLIC_URL + \"/img/characters.jpg\"\n\tlet locationsButton = process.env.PUBLIC_URL + \"/img/locations.jpg\"\n\tconst [characterPages, setCharacterPages] = useState(1)\n\tconst [locationPages, setLocationPages] = useState(1)\n\tconst [content, setContent] = useState(\"description\")\n\n\tconst locations = useLocations(locationPages)\n\tconst characters = useCharacters(characterPages)\n\n\tconst handlePageClick = (e) => {\n\t\tcontent === \"characters\"\n\t\t\t? setCharacterPages(e.selected + 1)\n\t\t\t: setLocationPages(e.selected + 1)\n\t\twindow.scrollTo(0, 0)\n\t}\n\n\tlet charactersFetched = []\n\tlet locationsFetched = []\n\n\tif (characters !== \"Loading...\") {\n\t\tcharactersFetched = characters\n\t}\n\tif (locations !== \"Loading...\") {\n\t\tlocationsFetched = locations\n\t}\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Logo onClick={() => setContent(\"description\")} />\n\t\t\t<div id=\"openbuttons\">\n\t\t\t\t<img\n\t\t\t\t\tsrc={charactersButton}\n\t\t\t\t\talt={\"charactersButton\"}\n\t\t\t\t\tonClick={() => setContent(\"characters\")}\n\t\t\t\t/>\n\t\t\t\t<img\n\t\t\t\t\tsrc={locationsButton}\n\t\t\t\t\talt={\"locationsButton\"}\n\t\t\t\t\tonClick={() => setContent(\"locations\")}\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t{content === \"characters\" ? (\n\t\t\t\t<Characters\n\t\t\t\t\tcharacters={charactersFetched}\n\t\t\t\t\thandlePageClick={handlePageClick}\n\t\t\t\t/>\n\t\t\t) : content === \"locations\" ? (\n\t\t\t\t<Locations\n\t\t\t\t\tlocations={locationsFetched}\n\t\t\t\t\thandlePageClick={handlePageClick}\n\t\t\t\t/>\n\t\t\t) : (\n\t\t\t\t<Infotext />\n\t\t\t)}\n\t\t</div>\n\t)\n}\n\nexport default App\n","import { useEffect } from \"react\"\nimport { useFetch } from \"./useFetch.js\"\nimport { mainUrls } from \"./dataRoutes.js\"\n\n/**\n     Fetch data from an open-source API. It returns json containing pagination.\n     The json contains an `info` and a `results` property. The `info` contains every information about the pagination,\n     the `results` contains the characters objects situated in the given page number in the pagination.\n     *\n     * @param pageNum integer that gives the pagination page number. The json `info` property contains how many pages are.\n     */\nexport const useCharacters = (pageNum = 1) => {\n\tconst [characters, setUrl] = useFetch(mainUrls.characters + pageNum)\n\tuseEffect(() => {\n\t\tsetUrl(mainUrls.characters + pageNum)\n\t}, [pageNum])\n\treturn characters === undefined ? \"Loading...\" : characters\n}\n\n/**\n     Fetch data from an open-source API. It returns json containing pagination.\n     The json contains an `info` and a `results` property. The `info` contains every information about the pagination,\n     the `results` contains the locations objects situated in the given page number in the pagination.\n     *\n     * @param pageNum integer that gives the pagination page number. The json `info` property contains how many pages are.\n     */\nexport const useLocations = (pageNum = 1) => {\n\tconst [locations, setUrl] = useFetch(mainUrls.locations + pageNum)\n\tuseEffect(() => {\n\t\tsetUrl(mainUrls.locations + pageNum)\n\t}, [pageNum])\n\treturn locations === undefined ? \"Loading...\" : locations\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}